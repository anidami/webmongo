
// Маршрут для администратора (перейдите в /admin, если вы администратор)
app.get('/admin', (req, res) => {
    // Проверяем, является ли текущий пользователь администратором
    if (req.session.isAdmin) {
        // Рендерим страницу администратора (здесь вы можете добавить свою страницу администратора)
        res.render('admin');
    } else {
        // Если текущий пользователь не администратор, перенаправляем на другую страницу (например, домашнюю страницу)
        res.redirect('/');
    }
});

// Пример использования: этот маршрут будет доступен только для администраторов
app.get('/admin/dashboard', isAdminMiddleware, (req, res) => {
    res.render('admin-dashboard');
});

// Маршрут для страницы администратора
app.get('/admin/dashboard', isAdminMiddleware, (req, res) => {
    res.render('admin-dashboard');
});


// Добавление маршрутов администратора и контроллеров
app.get('/admin/dashboard', isAdminMiddleware, adminController.getAdminDashboard);
app.get('/admin/users', isAdminMiddleware, adminController.getAdminUsers);
app.get('/admin/users/add', isAdminMiddleware, adminController.getAddUser);
app.post('/admin/users/add', isAdminMiddleware, adminController.postAddUser);
app.get('/admin/users/edit/:userId', isAdminMiddleware, adminController.getEditUser);
app.post('/admin/users/edit/:userId', isAdminMiddleware, adminController.postEditUser);
app.get('/admin/users/delete/:userId', isAdminMiddleware, adminController.getDeleteUser);


const adminController = {
    getAdminDashboard: (req, res) => {
        // Метод для отображения администраторской панели
        res.render('admin-dashboard');
    },
    getAdminUsers: async (req, res) => {
        // Метод для отображения списка пользователей
        try {
            const users = await User.find();
            res.render('admin-users', { users });
        } catch (error) {
            console.error('Error fetching users:', error);
            res.status(500).send('Internal Server Error');
        }
    },
    getAddUser: (req, res) => {
        // Метод для отображения формы добавления пользователя
        res.render('add-user');
    },
    postAddUser: async (req, res) => {
        // Метод для обработки добавления нового пользователя
        // Добавьте код для сохранения пользователя в базе данных
        // После успешного сохранения перенаправьте на страницу со списком пользователей
    },
    getEditUser: async (req, res) => {
        // Метод для отображения формы редактирования пользователя
        // Используйте параметр :userId из маршрута для определения пользователя
    },
    postEditUser: async (req, res) => {
        // Метод для обработки редактирования пользователя
        // Добавьте код для обновления информации о пользователе в базе данных
        // После успешного обновления перенаправьте на страницу со списком пользователей
    },
    getDeleteUser: async (req, res) => {
        // Метод для отображения подтверждения удаления пользователя
        // Используйте параметр :userId из маршрута для определения пользователя
    },
};


// Middleware для проверки, является ли пользователь администратором
const isAdminMiddleware = (req, res, next) => {
    // Проверяем, является ли текущий пользователь администратором
    if (req.session.isAdmin) {
        // Если администратор, продолжаем выполнение следующего middleware
        next();
    } else {
        // Если не администратор, возвращаем ошибку 403 Forbidden
        res.status(403).send('Forbidden');
    }
};

// Используйте isAdminMiddleware для маршрутов, требующих администраторских прав
